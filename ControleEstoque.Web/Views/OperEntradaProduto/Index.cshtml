@model List<ControleEstoque.Web.Models.EntradaProduto>
@{
    ViewBag.Title = "Entrada de Produtos";
}
<style>
    #grid th:nth-child(2) {
        width: 150px;
    }

    #grid th:nth-child(3) {
        width: 100px;
    }

    #entrada_produtos .row {
        margin: 15px 0;
    }

    #entrada_produtos {
        margin: auto;
        padding-top: 40px;
    }
</style>
<body>


    <div class="container" style="padding-top: 20px">

        <h1>@ViewBag.Title</h1>
        <hr />
        <br /><br />
        <!-- Large modal -->
        <div class="form-row">
            <div class="mb-2">
                <button type="button" class="btn btn-success" data-toggle="modal" data-target=".bd-example-modal-lg">Incluir</button>
            </div>
            <div class="mb-2 ml-4">
                <button type="button" class="btn btn-primary" data-toggle="collapse" data-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
                    Filtrar
                    <span class="badge badge-light" id="divTag"></span>
                </button>
            </div>

            <div class="mb-2 ml-4">
                <button type="button" class="badge badge-warning btn btn-warning invisivel" id="limparFiltro">Limpar Filtro</button>
            </div>


        </div>

        <div class="collapse" id="collapseExample">
            <div class="card card-body">
                <div class="form-group row">
                    <div class="col-sm-4">
                        @Html.TextBox("txt_data_inicio", null, new { @class = "form-control", type = "date", id = "txt_data_inicio" })
                    </div>
                    <p>até</p>
                    <div class="col-sm-4">
                        @Html.TextBox("txt_data_fim", null, new { @class = "form-control", type = "date", id = "txt_data_fim" })
                    </div>
                    <div class="col-sm-1">
                        <button type="button" class="btn btn-secondary" id="filtrarOk">Aplicar</button>
                    </div>
    
                </div>
                <div class="alert-warning invisivel" role="alert" id="alertaFiltragem">
                    Você deve preencher os dois campos acimas para aplicar a filtragem!
                </div>
            </div>
        </div>


        <br /><br />
    </div>
    <div class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">

                <div class="row">
                    <div style="margin: 15px" class="col-md-12">
                        <div id="entrada_produtos" class="col-md-10 col-md-offset-3">
                            <h3 class="text-center">@ViewBag.Title</h3>
                            <hr />
                            <div id="msg_mensagem_aviso" class="text-danger invisivel"></div>
                            <fieldset>
                                @Html.AntiForgeryToken()
                                <div class="row">
                                    <div class="col-md-6">
                                        @Html.Label("txt_data", "Data", new { @class = "control-label" })
                                        @Html.TextBox("txt_data", null, new { @class = "form-control", type = "date" })
                                    </div>
                                    <div class="col-md-6">
                                        @Html.Label("txt_numero", "Número", new { @class = "control-label" })
                                        @Html.TextBox("txt_numero", null, new { @class = "form-control", @readonly = "readonly" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-2">
                                        <a id="btn_incluir" style="color: #ffffff;" class="btn btn-success" role="button">
                                            <i class="glyphicon glyphicon-plus"></i> Incluir Produto
                                        </a>
                                    </div>
                                </div>
                                <div class="alert alert-warning" role="alert">
                                    Atenção: Adicione apenas uma entrada por produto, caso seja feito duas ou mais entradas de um mesmo produto, a entrada será cancelada!
                                </div>

                                <div class="row">
                                    <div class="col-md-12">
                                        <table id="grid" class="table table-bordered table-striped table-hover">
                                            <thead>
                                                <tr>
                                                    <th>Produto</th>
                                                    <th>Quantidade</th>
                                                    <th>Espaço Livre Armazenamento</th>
                                                </tr>
                                            </thead>
                                            <tbody></tbody>
                                        </table>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-12 text-right">
                                        <a id="btn_cancelar" style="color: #ffffff;" class="btn btn-danger" role="button" data-dismiss="modal">
                                            Cancelar
                                        </a>
                                        <a id="btn_salvar" style="color: #ffffff;" class="btn btn-success" role="button">
                                            Salvar
                                        </a>
                                    </div>
                                </div>
                            </fieldset>

                        </div>
                    </div>
                </div>




            </div>
        </div>
    </div>


    <div class="container">

        @*@if(ViewBag.Entradas.Count > 0)
            {*@


        <table class="table table-hover" id="tabelaEntradas">
            <thead>
                <tr>
                    <th scope="col">ID</th>
                    <th scope="col">Data</th>
                    <th scope="col">Numero</th>
                    <th scope="col">Produto</th>
                    <th scope="col">Quantidade</th>
                    <th scope="col">Ação</th>
                </tr>
            </thead>
            <tbody>
                @{
                    var linha = 0;
                    foreach (var entrada in ViewBag.Entradas)
                    {
                        linha++;
                        if (linha <= ViewBag.QuantMaxLinhasPorPagina)
                        {

                            <tr data-id="@entrada.Id">
                                <th scope="row">@entrada.Id</th>
                                <td>@entrada.Data.ToString("dd/MM/yyyy")</td>
                                <td>@String.Format("{0:00000}", entrada.Numero)  </td>
                                <td>@entrada.Produto.Nome</td>
                                <td>@entrada.Quantidade</td>
                                <td><button id="btn-remover" type="button" class="btn btn-danger">Remover</button></td>
                            </tr>
                        }
                        else
                        {
                            break;
                        }
                    }
                }
            </tbody>
        </table>

        @if (ViewBag.QuantPaginasEntradas > 1)
        {
            <div class="row">
                <div class="col-md-12">
                    <nav aria-label="Page navigation example">
                        <ul class="pagination">
                            <li class="page-item active"><a class="page-link" href="#">1</a></li>
                            @for (int i = 2; i <= ViewBag.QuantPaginasEntradas; i++)
                            {
                                <li class="page-item"><a class="page-link" href="#">@i</a></li>
                            }

                        </ul>
                    </nav>
                </div>
            </div>
        }


    </div>
</body>


@section Scripts{
    <script src="~/Scripts/mustache.min.js"></script>
    <script src="~/Scripts/comum.js"></script>
    <script>
        //TODO: Adicionar linhas na tabela
        //TODO: Retornar idSalvo das entradas


        //Verificar se existem quantidades inválidas
        var quantidadeinvalida = false;

        //anti_forgery_token
        function add_anti_forgery_token(data) {
            data.__RequestVerificationToken = $('[name=__RequestVerificationToken]').val();
            return data;
        }



        var sequencia = 1;
        //Formatando data
        function formatar_data(data) {
            var dia = ('0' + data.getDate()).slice(-2);
            var mes = ('0' + (data.getMonth() + 1)).slice(-2);
            return data.getFullYear() + "-" + mes + "-" + dia;
        }

        //Incluindo linhas dos produtos na entrada
        function incluir_linha_produto() {
            $('#grid tbody').append(Mustache.render($('#template-produto').html(), { Sequencia: sequencia }));
            sequencia++;
        }

        //Limpando o modal
        function limpar_tela() {
            $('#txt_numero').val('');
            $('#grid tbody').empty();
            incluir_linha_produto();
        }



        //Obtendo a lista de todos os produtos que se desejam realizar uma entrada
        function obter_lista_entradas() {
            var ret = [];
            $('#grid tbody tr').each(function (index, item) {
                var txt_quantidade = $(this).find('input'),
                    ddl_produto = $(this).find('select'),
                    quantidade = parseInt(txt_quantidade.val()),
                    produto = parseInt(ddl_produto.val());
                if (quantidade > 0) {
                    ret.push({ IdProduto: produto, Quantidade: quantidade });
                }
            });
            return ret;
        }


        //Setando o dia atual no campo txt_data e limpando o modal.
        $(document).ready(function () {
            var hoje = new Date();
            $('#txt_data').val(formatar_data(hoje));
            limpar_tela();
        })

         //Incluindo uma linha de produto caso clique no botão incluir
        .on('click', '#btn_incluir', function () {
            incluir_linha_produto();
        })

         //Salvando a entrada
        .on('click', '#btn_salvar', function () {
            if (quantidadeinvalida == false) {
                var btn = $(this);
                var lista_entradas = obter_lista_entradas();
                var txtData = $('#txt_data').val();
                if (lista_entradas.length == 0) {
                    swal.fire('Aviso', 'Para salvar, você deve informar produtos com quantidades.', 'warning');
                }
                else {
                    var url = '@Url.Action("Salvar", "OperEntradaProduto")',
                        dados = {
                            data: $('#txt_data').val(),
                            produtos: JSON.stringify(lista_entradas)
                        };
                    $.post(url, add_anti_forgery_token(dados), function (response) {
                        if (response.OK) {
                            $('#txt_numero').val(response.Numero);
                            limpar_tela();
                            $('.bd-example-modal-lg').modal('toggle');


                            //Adicionando Dados na tabela
                            var table = $('#tabelaEntradas').find('tbody');
               
                           
                                console.log(response.Pedidos);
                                //$('#grid_cadastro').removeClass('invisivel');
                                //$('#mensagem_grid').addClass('invisivel');
                                for (var i = 0; i < response.Pedidos[0].length; i++) {
                                    //console.log(response.Pedidos[0][i]);
                                    table.append(criar_linha_grid(response.Pedidos[0][i]));
                                }
                           


                            //Mostrando mensagem
                            swal.fire({
                                type: 'success',
                                title: response.Mensagem,
                                text: 'Número da entrada: ' + response.Numero
                            });



                        } else {
                            //Fechando o modal e exibindo mensagem de erro
                            $('.bd-example-modal-lg').modal('toggle');
                            swal.fire('Error', response.Mensagem, 'info');
                        }
                    })
                    .fail(function () {
                        //Caso o $Post falhe
                        swal.fire('Aviso', 'Não foi possível salvar a entrada de produtos, verique se a quantidade está dentro da capacidade livre do local de armazenamento de um ou mais produtos selecionados.', 'warning');
                    });
                }
            } else {
                //A quantidade de algum produto está acima do que ele pode armazenar.
                swal.fire('Erro', 'Não foi possível salvar a entrada de produtos, verique se a quantidade está dentro da capacidade livre do local de armazenamento de um ou mais produtos selecionados.', 'error');
            }
        })

        //Cancelar a entrada
        .on('click', '#btn_cancelar', function () {
            var lista_entradas = obter_lista_entradas();
            if (lista_entradas.length == 0 || $('#txt_numero').val() != '') {
                limpar_tela();
            }
            else {
                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                        confirmButton: 'btn btn-success',
                        cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: true,
                })

                swalWithBootstrapButtons.fire({
                    title: 'Você tem Certeza?',
                    text: "Você perderá sua entrada.",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Cancelar!',
                    cancelButtonText: 'Sair',
                    reverseButtons: true
                }).then((result) => {
                    if (result.value) {
                        limpar_tela();
                        swalWithBootstrapButtons.fire(
                          'Cancelado',
                          'Sua entrada foi cancelada.',
                          'success'
                        )
                    } else if (
                      result.dismiss === Swal.DismissReason.cancel
                    ) {
                        swalWithBootstrapButtons.fire(
                          'Não Cancelar',
                          'Sua entrada foi mantida:)',
                          'error'
                        )
                    }
                })
            }
            //Recuperando o tamanho de armazenamento livre de um determinado produto
        }).on('change', '.produtos', function () {
            var id_produto = parseInt($(this).val());
            var atributo = $(this).attr('id');
            url = '@Url.Action("RecuperarCapacidadeLivreArmazenamentoProduto", "CadProduto")';
            //console.log(atributo);


            if (id_produto != 0) {
                var dados = { id: id_produto };
                //console.log(dados.id);

                $.post(url, dados, function (response) {
                    if (response) {
                        var linha = $("#" + atributo).closest('tr');
                        linha.find('.capacidade').val(response.capacidadeLivre)


                        //Limitando a quantidade no valor da capacidade livre
                        linha.find('.quantidade').attr('max', response.capacidadeLivre);

                    }
                })
            } else {
                var linha = $("#" + atributo).closest('tr');
                linha.find('.capacidade').val('');
            }


            //Verificando se a quantidade informada está dentro do do máximo permitido pelo atribudo max
        }).on('keyup', '.quantidade', function () {


            var quantidade = Number($(this).val());
            var maximo = Number($(this).attr('max'));
            //console.log("DIGITADO: " + quantidade);
            //console.log("MAXIMO: " + maximo)

            if (quantidade > maximo) {
                $(this).removeClass('is-valid');
                $(this).addClass('is-invalid');
                quantidadeinvalida = true;
            } else {
                $(this).removeClass('is-invalid');
                $(this).addClass('is-valid');
                quantidadeinvalida = false;



            }

            //Verificando se a quantidade informada está dentro do do máximo permitido pelo atribudo max
        }).on('change', '.quantidade', function () {


            var quantidade = Number($(this).val());
            var maximo = Number($(this).attr('max'));
            //console.log("DIGITADO: " + quantidade);
            //console.log("MAXIMO: " + maximo)

            if (quantidade > maximo) {
                $(this).removeClass('is-valid');
                $(this).addClass('is-invalid');
                quantidadeinvalida = true;
            } else {
                $(this).removeClass('is-invalid');
                $(this).addClass('is-valid');
                quantidadeinvalida = false;

            }
            //Removendo uma entrada
        }).on('click', '#btn-remover', function () {

            const swalWithBootstrapButtons = Swal.mixin({
                customClass: {
                    confirmButton: 'btn btn-success ml-4',
                    cancelButton: 'btn btn-danger'
                },
                buttonsStyling: false,
            })

            swalWithBootstrapButtons.fire({
                title: 'Você tem certeza disso?',
                text: "Não será possível reverter isso!",
                type: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Sim, Excluir!',
                cancelButtonText: 'Não, Cancelar!',
                reverseButtons: true
            }).then((result) => {
                if (result.value) {
                    var btn = $(this),
                    tr = btn.closest('tr'),
                    id = tr.attr('data-id'),
                    url = '@Url.Action("RemoverEntradaSaidaProduto", "OperEntradaProduto")',
                    param = { 'id': id, 'tipo': 'entrada' };
                    $.post(url, param, function (response) {
                        if (response.OK) {
                            tr.remove();
                            swal.fire({
                                type: 'success',
                                title: response.Mensagem
                            });
                        } else {
                            swal.fire({
                                type: 'error',
                                title: "Entrada cancelada!",
                                text: response.Mensagem
                            });
                        }
                    })

                } else if (
                    // Read more about handling dismissals
                  result.dismiss === Swal.DismissReason.cancel
                ) {
                    swalWithBootstrapButtons.fire(
                      'Cancelado',
                      'Sua entrada está segura! :)',
                      'error'
                    )
                }
            })

            //Paginação
        }).on('click', '.page-item', function () {
            var btn = $(this),
                tamPag = 5,
                pagina = btn.text(),
                url = '@Url.Action("EntradaSaidaPagina", "OperEntradaProduto")',
                param = { 'pagina': pagina, 'tamPag': tamPag, 'dataInicio': $('#txt_data_inicio').val(), 'dataFim': $('#txt_data_fim').val(), 'tipo': 'entrada' };

            $.post(url, add_anti_forgery_token(param), function (response) {
                if (response) {
                    var table = $('#tabelaEntradas').find('tbody');
                    table.empty();

                    if (response.length > 0) {
                        //$('#grid_cadastro').removeClass('invisivel');
                        //$('#mensagem_grid').addClass('invisivel');
                        for (var i = 0; i < response[0].length; i++) {
                            console.log(response[0][i]);
                            table.append(criar_linha_grid(response[0][i]));
                        }
                    }
                    else {
                        //$('#grid_cadastro').addClass('invisivel');
                        //$('#mensagem_grid').removeClass('invisivel');
                    }

                    btn.siblings().removeClass('active');
                    btn.addClass('active');

                }
            })
        }).on('click', '#filtrarOk', function () {
            var data_inicio = $('#txt_data_inicio').val();
            data_inicio = data_inicio.substr(0, 10).split("-");
            data_inicio = data_inicio[2] + "-" + data_inicio[1] + "-" + data_inicio[0];
            data_inicio = data_inicio.replace("-", "/");
            data_inicio = data_inicio.replace("-", "/");



            var data_fim = $('#txt_data_fim').val();
            data_fim = data_fim.substr(0, 10).split("-");
            data_fim = data_fim[2] + "-" + data_fim[1] + "-" + data_fim[0];
            data_fim = data_fim.replace("-", "/");
            data_fim = data_fim.replace("-", "/");

            console.log(data_inicio);
            if (data_inicio.includes("undefined") && data_fim.includes("undefined")) {
                console.log("preencha as datas");
                $('#alertaFiltragem').removeClass('invisivel');

            } else {
                $('#divTag').html("Filtrando de: " + data_inicio + " até " + data_fim);

                $('#divTag').removeClass('invisivel');
                $('#alertaFiltragem').addClass('invisivel');
                $('#limparFiltro').removeClass('invisivel');

                //Requisitando
                var btn = $(this),
                   tamPag = 5,
                   pagina = 1,
                   url = '@Url.Action("EntradaSaidaPagina", "OperEntradaProduto")',
                   param = { 'pagina': pagina, 'tamPag': tamPag, 'dataInicio': data_inicio, 'dataFim': data_fim, 'tipo': 'entrada' };

                $.post(url, add_anti_forgery_token(param), function (response) {
                    if (response) {
                        var table = $('#tabelaEntradas').find('tbody');
                        table.empty();

                        if (response.length > 0) {
                            //$('#grid_cadastro').removeClass('invisivel');
                            //$('#mensagem_grid').addClass('invisivel');
                            for (var i = 0; i < response[0].length; i++) {
                                console.log(response[0][i]);
                                table.append(criar_linha_grid(response[0][i]));
                            }
                        }
                        else {
                            //$('#grid_cadastro').addClass('invisivel');
                            //$('#mensagem_grid').removeClass('invisivel');
                        }

                        //Ocultando campo filtrar
                        $('#collapseExample').collapse('hide');


                        btn.siblings().removeClass('active');
                        btn.addClass('active');

                    }
                })
            };




        }).on('click', '#limparFiltro', function () {
            $('#txt_data_inicio').val(0);
            $('#txt_data_fim').val(0);
            $('#limparFiltro').removeClass('invisivel');
            $('#divTag').empty();
            //Requisitando
            var btn = $(this),
               tamPag = 5,
               pagina = 1,
               url = '@Url.Action("EntradaSaidaPagina", "OperEntradaProduto")',
               param = { 'pagina': pagina, 'tamPag': tamPag, 'tipo': 'entrada' };

            $.post(url, add_anti_forgery_token(param), function (response) {
                if (response) {
                    var table = $('#tabelaEntradas').find('tbody');
                    table.empty();
                    console.log(response);
                    if (response.length > 0) {
                        //$('#grid_cadastro').removeClass('invisivel');
                        //$('#mensagem_grid').addClass('invisivel');
                        for (var i = 0; i < response[0].length; i++) {
                            console.log(response[0][i]);
                            table.append(criar_linha_grid(response[0][i]));
                        }
                    }
                    else {
                        //$('#grid_cadastro').addClass('invisivel');
                        //$('#mensagem_grid').removeClass('invisivel');
                    }

                    //Ocultando campo filtrar
                    $('#collapseExample').collapse('hide');


                    btn.siblings().removeClass('active');
                    btn.addClass('active');

                }
            })

        });

        //Definindo os dados que serão inseridos na linha
        function set_dados_grid(dados) {
            return '<td>' + dados.Id + '</td>' +
                    '<td>' + parseJsonDate(dados.Data) + '</td>' +
                    '<td>' + dados.Numero + '</td>' +
                    '<td>' + dados.Produto.Nome + '</td>' +
                   '<td>' + dados.Quantidade + '</td>';
        }


        //Cria uma linha da tabela conforme dados recebidos
        function criar_linha_grid(dados) {
            var result = set_dados_grid(dados);
            var ret =
                 '<tr data-id=' + dados.Id + '>' +
                result +
                '<td>' +
                '<button id="btn-remover" type="button" class="btn btn-danger">Remover</button>' +
                '</td>' +
                '</tr>';
            return ret;
        }

        //Desserializa a Data e formata em dia/mês/ano - dd/MM/yyyy
        function parseJsonDate(jsonDate) {
            var offset = new Date().getTimezoneOffset() * 60000;
            var parts = /\/Date\((-?\d+)([+-]\d{2})?(\d{2})?.*/.exec(jsonDate);
            if (parts[2] == undefined) parts[2] = 0;
            if (parts[3] == undefined) parts[3] = 0;
            d = new Date(+parts[1] + offset + parts[2] * 3600000 + parts[3] * 60000);
            date = d.getDate() + 1;
            date = date < 10 ? "0" + date : date;
            date--;
            mon = d.getMonth() + 1;
            mon = mon < 10 ? "0" + mon : mon;
            year = d.getFullYear();
            return (date + "/" + mon + "/" + year);
        };

    </script>

    <script id="template-produto" type="x-tmpl-mustache">
        <tr>
            <td>

                <select class="form-control produtos" id="ddl_produto_{{ Sequencia }}">
                    <option value="0" selected>--SELECIONE--</option>

                    @foreach (var produto in ViewBag.Produtos)
                    {

                        <option value="@produto.Id">@produto.Nome</option>
                    }


                </select>
            </td>
            <td>
                <input type="number" id="txt_quantidade_{{ Sequencia }}" class="form-control quantidade" value="" max="1000000000" min="1">
            </td>
            <td>
                <input type="number" id="txt_capacidade_{{ Sequencia }}" class="form-control capacidade" value="" readonly>
            </td>
        </tr>
    </script>
}
